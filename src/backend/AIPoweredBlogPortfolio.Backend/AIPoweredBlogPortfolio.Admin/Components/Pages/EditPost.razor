@page "/posts/edit/{PostId:int?}"
@using AIPoweredBlogPortfolio.Admin.Components.Layout
@using AIPoweredBlogPortfolio.Admin.Models
@using AIPoweredBlogPortfolio.Admin.Services
@inject NavigationManager Navigation
@inject BlogPostClient BlogPostClient
@inject LocalStorageHelper localStorageHelper
@inject IJSRuntime JSRuntime
@inject ILogger<EditPost> Logger
@using Blazored.TextEditor
@using Newtonsoft.Json

<Breadcrumb CurrentPage="Edit Post" BreadcrumbItems="@(new Dictionary<string, string> { { "/", "Home" }, { "/posts", "Manage Posts" } })" />

<div class="card">
    <div class="card-header">
        <h5>Blog Post Editor</h5>
    </div>
    <div class="card-body">
        <EditForm Model="@BlogPost" OnValidSubmit="SavePost">
            <div class="row">
                <div class="col-md-8">
                    <div class="mb-3">
                        <label class="form-label">Title</label>
                        <div class="input-group">
                            <InputText class="form-control" @bind-Value="BlogPost.Title" />
                            <button type="button" class="btn btn-outline-secondary" @onclick="GenerateTitle">
                                <i class="bi bi-magic"></i> AI Generate
                            </button>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Content</label>
                        <BlazoredTextEditor @ref="textEditor">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                    <button class="ql-image"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                                <h4>This Toolbar works with HTML</h4>
                                <a href="http://BlazorHelpWebsite.com">
                                    BlazorHelpWebsite.com
                                </a>
                            </EditorContent>
                        </BlazoredTextEditor>
                        <button class="btn btn-link" @onclick="RefineContent">
                            <i class="bi bi-spellcheck"></i> AI Refine
                        </button>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Tags</label>
                        <InputText class="form-control" @bind-Value="BlogPost.Tags" placeholder="Enter tags separated by commas" />
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="card mb-3">
                        <div class="card-header">
                            SEO Optimization
                        </div>
                        <div class="card-body">
                            <button class="btn btn-sm btn-info mb-2" @onclick="GenerateSeoKeywords">
                                <i class="bi bi-lightbulb"></i> Suggest Keywords
                            </button>
                            <div class="seo-keywords">
                                @foreach (var keyword in SeoKeywords)
                                {
                                    <span class="badge bg-primary me-1">@keyword</span>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Other post settings -->
                </div>
            </div>

            <button type="submit" class="btn btn-success" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true">Saving...</span>
                }
                else
                {
                    <span>Save Post</span>
                }
            </button>
        </EditForm>
    </div>
</div>

@if (isLoading)
{
    <div class="loading-overlay">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    [Parameter] public int? PostId { get; set; }
    private BlogPostRequest BlogPost { get; set; } = new();
    private List<string> SeoKeywords = new();
    private string token;
    private BlazoredTextEditor textEditor;
    private bool isLoading = false;
    private int AdminId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("OnAfterRenderAsync triggered");
            token = await localStorageHelper.GetItemAsync<string>("authToken");
            AdminId = await localStorageHelper.GetItemAsync<int>("AdminIdValue");
            if (PostId.HasValue)
            {
                await LoadBlogPost(PostId.Value);
            }
            StateHasChanged(); // Trigger re-render
        }
    }

    private async Task LoadBlogPost(int postId)
    {
        try
        {
            var post = await BlogPostClient.GetBlogPostAsync(postId, token);
            BlogPost = new BlogPostRequest
                {
                    PostId = post.PostId,
                    Title = post.Title,
                    ContentHtml = post.ContentHtml,
                    RawContent = post.RawContent,
                    Tags = post.Tags,
                    MetaDescription = post.MetaDescription,
                    AdminId = post.AdminId
                };
            await textEditor.LoadHTMLContent(BlogPost.ContentHtml);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading blog post");
        }
    }

    private async Task GenerateTitle()
    {
        // Call AI service to generate title
        // BlogPost.Title = await AiService.GenerateTitle(BlogPost.Content);
    }

    private async Task RefineContent()
    {
        // Call AI service to refine content
        // BlogPost.Content = await AiService.RefineContent(BlogPost.Content);
    }

    private async Task GenerateSeoKeywords()
    {
        // Call AI service to generate SEO keywords
        // SeoKeywords = await AiService.GenerateSeoKeywords(BlogPost.Content);
    }

    private async Task SavePost()
    {
        isLoading = true;
        StateHasChanged(); // Trigger re-render to show loading overlay
        try
        {
            BlogPost.ContentHtml = JsonConvert.SerializeObject(await textEditor.GetHTML());
            BlogPost.RawContent = await textEditor.GetText();
            BlogPost.AdminId = AdminId;
            if (PostId.HasValue)
            {
                await BlogPostClient.UpdateBlogPostAsync(BlogPost.PostId, BlogPost, token);
            }
            else
            {
                await BlogPostClient.CreateBlogPostAsync(BlogPost, token);
            }
            Navigation.NavigateTo("/posts");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving blog post");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Trigger re-render to hide loading overlay
        }
    }
}

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }
</style>
