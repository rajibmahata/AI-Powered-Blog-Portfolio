@page "/posts"
@using AIPoweredBlogPortfolio.Admin.Models
@using AIPoweredBlogPortfolio.Admin.Services
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject LocalStorageHelper localStorageHelper
@inject BlogPostClient BlogPostClient

<Breadcrumb CurrentPage="Manage Posts" BreadcrumbItems="new Dictionary<string, string> { { "/", "Home" } }" />

<h3>Blog Post Management</h3>
<button class="btn btn-primary mb-3" @onclick="() => NavigateToEditPost(null)">Add New Post</button>

@if (blogPosts == null)
{
    <div class="loading-overlay">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Tags</th>
                <th>Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var post in blogPosts)
            {
                <tr>
                    <td>@post.Title</td>
                    <td>@post.Tags</td>
                    <td>@post.CreatedAt.ToString("yyyy-MM-dd")</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => NavigateToEditPost(post.PostId)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeletePost(post)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isLoading)
{
    <div class="loading-overlay">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    private List<BlogPostResponse> blogPosts;
    private string token { get; set; }
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("OnAfterRenderAsync triggered");
            token = await localStorageHelper.GetItemAsync<string>("authToken");
            await LoadBlogPosts(token);
            StateHasChanged(); // Trigger re-render
        }
    }

    private async Task LoadBlogPosts(string token)
    {
        isLoading = true;
        StateHasChanged(); // Trigger re-render to show loading overlay
        try
        {
            IEnumerable<BlogPostResponse> blogPostResponses = await BlogPostClient.GetBlogPostsAsync(token);
            blogPosts = blogPostResponses.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blog posts: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Trigger re-render to hide loading overlay
        }
    }

    private void NavigateToEditPost(int? postId)
    {
        if (postId.HasValue)
        {
            Navigation.NavigateTo($"/posts/edit/{postId.Value}");
        }
        else
        {
            Navigation.NavigateTo("/posts/edit");
        }
    }

    private async Task DeletePost(BlogPostResponse post)
    {
        isLoading = true;
        StateHasChanged(); // Trigger re-render to show loading overlay
        try
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this post?"))
            {
                var token = await localStorageHelper.GetItemAsync<string>("authToken");
                await BlogPostClient.DeleteBlogPostAsync(post.PostId, token);
                await LoadBlogPosts(token);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting blog post: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Trigger re-render to hide loading overlay
        }
    }
}

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }
</style>
