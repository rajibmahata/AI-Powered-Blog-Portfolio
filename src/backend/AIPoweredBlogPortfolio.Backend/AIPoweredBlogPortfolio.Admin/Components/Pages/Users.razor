@page "/users"
@using AIPoweredBlogPortfolio.Admin.Components.Layout
@using AIPoweredBlogPortfolio.Admin.Models
@using AIPoweredBlogPortfolio.Admin.Services
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject LocalStorageHelper localStorageHelper
@inject AdminClient AdminClient

<Breadcrumb CurrentPage="User" BreadcrumbItems="@(new Dictionary<string, string> { { "/", "Home" } })" />

<h3>Admin User Management</h3>
<button class="btn btn-primary mb-3" @onclick="ShowAddModal">Add New Admin</button>

@if (admins == null)
{
    <div class="loading-overlay">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Username</th>
                <th>Email</th>
                <th>Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var admin in admins)
            {
                <tr>
                    <td>@admin.Username</td>
                    <td>@admin.Email</td>
                    <td>@admin.CreatedAt.ToString("yyyy-MM-dd")</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowEditModal(admin)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteAdmin(admin)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Add Admin Modal -->
<AdminEditModal ShowModal="@showAddModal"
                OnClose="@(() => showAddModal = false)"
                OnSave="@HandleAddAdmin"
                IsNew="true" />

<!-- Edit Admin Modal -->
<AdminEditModal ShowModal="@showEditModal"
                OnClose="@(() => showEditModal = false)"
                OnSave="@HandleUpdateAdmin"
                IsNew="false"
                SelectedAdmin="@selectedAdmin" />

@if (isLoading)
{
    <div class="loading-overlay">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    private List<AdminViewModel> admins;
    private bool showAddModal;
    private bool showEditModal;
    private AdminRegisterRequest selectedAdmin;
    private bool _hasRendered = false;
    private string token { get; set; }
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _hasRendered = true;
            token = await localStorageHelper.GetItemAsync<string>("authToken");
            await LoadAdmins(token);
            StateHasChanged(); // Trigger re-render
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (_hasRendered) // Ensure JavaScript interop is available
        {
            await LoadAdmins(token);
        }
    }

    private async Task LoadAdmins(string token)
    {
        isLoading = true;
        StateHasChanged(); // Trigger re-render to show loading overlay
        try
        {
            IEnumerable<AdminViewModel> adminViewModels = await AdminClient.GetAllAdminsAsync(token);
            admins = adminViewModels.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading admins: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Trigger re-render to hide loading overlay
        }
    }

    private void ShowAddModal() => showAddModal = true;

    private void ShowEditModal(AdminViewModel admin)
    {
        selectedAdmin = new AdminRegisterRequest()
            {
                AdminId = admin.AdminId,
                Username = admin.Username,
                Email = admin.Email,
                Password = admin.Password
            };
        showEditModal = true;
    }

    private async Task HandleAddAdmin(AdminRegisterRequest newAdmin)
    {
        isLoading = true;
        StateHasChanged(); // Trigger re-render to show loading overlay
        try
        {
            var token = await localStorageHelper.GetItemAsync<string>("authToken");
            var response = await AdminClient.CreateAdminAsync(new AdminRegisterRequest
                {
                    Username = newAdmin.Username,
                    Email = newAdmin.Email,
                    Password = newAdmin.Password // Assuming PasswordHash is used for password input
                }, token);
            if (response != null)
            {
                await LoadAdmins(token);
                showAddModal = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding admin: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Trigger re-render to hide loading overlay
        }
    }

    private async Task HandleUpdateAdmin(AdminRegisterRequest updatedAdmin)
    {
        isLoading = true;
        StateHasChanged(); // Trigger re-render to show loading overlay
        try
        {
            var token = await localStorageHelper.GetItemAsync<string>("authToken");
            var response = await AdminClient.UpdateAdminAsync(updatedAdmin.AdminId, new AdminUpdateRequest
                {
                    Username = updatedAdmin.Username,
                    Email = updatedAdmin.Email,
                    Password = updatedAdmin.Password // Assuming PasswordHash is used for password input
                }, token);
            if (response != null)
            {
                await LoadAdmins(token);
                showEditModal = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating admin: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Trigger re-render to hide loading overlay
        }
    }

    private async Task DeleteAdmin(AdminViewModel admin)
    {
        isLoading = true;
        StateHasChanged(); // Trigger re-render to show loading overlay
        try
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this admin?"))
            {
                var token = await localStorageHelper.GetItemAsync<string>("authToken");
                await AdminClient.DeleteAdminAsync(admin.AdminId, token);
                await LoadAdmins(token);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting admin: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Trigger re-render to hide loading overlay
        }
    }
}

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }
</style>

