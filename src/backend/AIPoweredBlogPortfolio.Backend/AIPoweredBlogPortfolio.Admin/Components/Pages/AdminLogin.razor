@page "/login"
@using AIPoweredBlogPortfolio.Admin.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@using System.ComponentModel.DataAnnotations

<HeadContent>
    <link href="@Assets["login.css"]" rel="stylesheet" />
</HeadContent>

<div class="d-flex align-items-center justify-content-center vh-100">
    <div class="card shadow-sm p-4" style="max-width: 400px; width: 100%;">
        <div class="card-body">
            <h4 class="card-title text-center mb-4">Admin Login</h4>

            <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="@("loginForm")">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Username)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                    <label for="rememberMe" class="form-check-label">Remember Me</label>
                </div>

                <button type="submit" class="btn btn-primary btn-block">Login</button>
            </EditForm>

            @if (loginFailed)
            {
                <div class="text-danger mt-3">Login failed. Please try again.</div>
            }
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new LoginModel();
    private bool loginFailed = false;
    private bool isDisposed = false;

    protected override void OnInitialized()
    {
        isDisposed = false;
    }


    private async Task HandleLogin()
    {
        Console.WriteLine("HandleLogin called");
        var isAuthenticated = await AuthenticateUser(loginModel);
        if (isAuthenticated)
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(loginModel.Username);
            Navigation.NavigateTo("/");
        }
        else
        {
            loginFailed = true;
        }
    }

    private async Task<bool> AuthenticateUser(LoginModel loginModel)
    {
        var client = HttpClientFactory.CreateClient("API");
        var response = await client.PostAsJsonAsync("api/admin/login", loginModel);
        return response.IsSuccessStatusCode;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        public bool RememberMe { get; set; }
    }

    public void Dispose()
    {
        if (!isDisposed)
        {
            isDisposed = true;
        }
    }
}
