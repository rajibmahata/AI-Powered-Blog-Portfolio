@page "/login"
@using AIPoweredBlogPortfolio.Admin.Services
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject AdminClient AdminClient
@using System.ComponentModel.DataAnnotations
@using AIPoweredBlogPortfolio.Admin.Models
@inject LocalStorageHelper LocalStorageHelper

<HeadContent>
    <link href="@Assets["login.css"]" rel="stylesheet" />
</HeadContent>

<div class="d-flex align-items-center justify-content-center vh-100">
    <div class="card shadow-sm p-4" style="max-width: 400px; width: 100%;">
        <div class="card-body">
            <h4 class="card-title text-center mb-4">Admin Login</h4>

            <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="@("loginForm")">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Username)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                    <label for="rememberMe" class="form-check-label">Remember Me</label>
                </div>

                <button type="submit" class="btn btn-primary btn-block">Login</button>
            </EditForm>

            @if (loginFailed)
            {
                <div class="text-danger mt-3">Login failed. Please try again.</div>
            }
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private AdminLoginRequest loginModel { get; set; } = new AdminLoginRequest();
    private bool loginFailed = false;
    private bool isDisposed = false;
    private bool shouldStoreToken = false;
    private bool _hasRendered = false;
    private AdminLoginResponse adminLoginResponse { get; set; } = new AdminLoginResponse();

    protected override void OnInitialized()
    {
        isDisposed = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _hasRendered = true;
            StateHasChanged(); // Trigger re-render
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            Console.WriteLine("HandleLogin called");

            var isAuthenticated = await AuthenticateUser(loginModel);

            if (isAuthenticated)
            {
                Console.WriteLine("Login successful. Storing token...");
              
                if (_hasRendered) // Ensure JavaScript interop is available
                {
                    await LocalStorageHelper.SetItemAsync("authToken", adminLoginResponse.Token);
                }
               
                await ((CustomAuthenticationStateProvider)AuthenticationStateProvider)
                    .MarkUserAsAuthenticated(adminLoginResponse.Token);

                Console.WriteLine("Navigating to home page");
                Navigation.NavigateTo("/", true);
            }
            else
            {
                loginFailed = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            loginFailed = true;
        }
    }

    private async Task<bool> AuthenticateUser(AdminLoginRequest loginModel)
    {
        try
        {
            adminLoginResponse = await AdminClient.LoginAsync(loginModel);
            if (string.IsNullOrWhiteSpace(adminLoginResponse?.Token))
            {
                Console.WriteLine("Invalid login response: Token is empty.");
                return false;
            }
         
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            return false;
        }
    }

    public void Dispose()
    {
        if (!isDisposed)
        {
            isDisposed = true;
        }
    }
}
